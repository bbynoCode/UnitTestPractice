        -:    0:Source:Password.cpp
        -:    0:Graph:Password.gcno
        -:    0:Data:Password.gcda
        -:    0:Runs:1
        -:    1:#include "Password.h"
        -:    2:#include <string>
        -:    3:#include <cctype>
        -:    4:#include <vector>
        -:    5:
        -:    6:using std::string;
        -:    7:using std::vector;
        -:    8:
        -:    9:int MIN_PASSWORD_LENGTH = 8;
        -:   10:int MAX_PASSWORD_LENGTH = 20;
        -:   11:/*
        -:   12:  The function receives a string counts how many times the same character 
        -:   13:  occurs at the beginning of the string, before any other characters (or the
        -:   14:  end of the string). The function is case-sensitive so 'Z' is different than
        -:   15:  'z' and any ASCII characters are allowed.
        -:   16:*/
function _ZN8Password24count_leading_charactersENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 7 returned 100% blocks executed 100%
        7:   17:int Password::count_leading_characters(string phrase){
        7:   18:  int repetition = 0;
        7:   19:  int index = 0;
        7:   20:  if(phrase.length() == 0){
call    0 returned 7
branch  1 taken 1 (fallthrough)
branch  2 taken 6
        1:   21:    return repetition;
        -:   22:  }
        6:   23:  repetition = 1;
       50:   24:  while( index < phrase.length()){
call    0 returned 50
branch  1 taken 44
branch  2 taken 6 (fallthrough)
       44:   25:    if (phrase[index] == phrase[index+1])
call    0 returned 44
call    1 returned 44
branch  2 taken 15 (fallthrough)
branch  3 taken 29
       15:   26:      repetition++;
       44:   27:    index++;
        -:   28:  }
        6:   29:  return repetition;
        -:   30:}
        -:   31:
        -:   32://The function takes a string as input and determines if there are lowercase and uppercase characters in it.
function _ZN8Password14has_mixed_caseENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 11 returned 100% blocks executed 100%
       11:   33:bool Password::has_mixed_case(string phrase){
       11:   34:  if(phrase.length() == 0)
call    0 returned 11
branch  1 taken 1 (fallthrough)
branch  2 taken 10
        1:   35:    return false;
        -:   36:
       10:   37:  if(phrase.length() == 1)
call    0 returned 10
branch  1 taken 1 (fallthrough)
branch  2 taken 9
        1:   38:    return false;
        -:   39:
        9:   40:  bool has_lower = false;
        9:   41:  bool has_upper = false;
        -:   42:
        9:   43:  int index = 0;
      117:   44:  while(index < phrase.length()){
call    0 returned 117
branch  1 taken 108
branch  2 taken 9 (fallthrough)
      108:   45:    if (islower(phrase[index])){
call    0 returned 108
branch  1 taken 49 (fallthrough)
branch  2 taken 59
       49:   46:      has_lower = true;
       59:   47:    } else if (isupper(phrase[index])) {
call    0 returned 59
branch  1 taken 16 (fallthrough)
branch  2 taken 43
       16:   48:      has_upper = true;
        -:   49:    }
      108:   50:    index++;
        -:   51:  }
        9:   52:  return has_lower && has_upper;
branch  0 taken 8 (fallthrough)
branch  1 taken 1
branch  2 taken 4 (fallthrough)
branch  3 taken 4
        -:   53:}
        -:   54:
        -:   55:
        -:   56:  /*
        -:   57:  receives a password and sets the latest in pass_history to it if and only
        -:   58:  if it meets all criteria:
        -:   59:    1. The password is at least 8 letters long, but no longer than 20
        -:   60:    2. It has no more than 3 of the same leading characters
        -:   61:    3. It has mixed case (at least one upper case and at least one lower case)
        -:   62:    4. It was not a previous password in the history
        -:   63:  */
function _ZN8Password3setENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 5 returned 100% blocks executed 77%
        5:   64:void Password::set(string phrase){
        -:   65:
        5:   66:  if ((phrase.length() >= MIN_PASSWORD_LENGTH) && (phrase.length() <= MAX_PASSWORD_LENGTH) ){
call    0 returned 5
branch  1 taken 4 (fallthrough)
branch  2 taken 1
call    3 returned 4
branch  4 taken 3 (fallthrough)
branch  5 taken 1
branch  6 taken 3 (fallthrough)
branch  7 taken 2
        3:   67:    if ((count_leading_characters(phrase) <= 3) && has_mixed_case(phrase)){
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
branch  6 taken 2 (fallthrough)
branch  7 taken 1
call    8 returned 2
branch  9 taken 2 (fallthrough)
branch 10 taken 0 (throw)
call   11 returned 2
branch 12 taken 2 (fallthrough)
branch 13 taken 0 (throw)
branch 14 taken 1 (fallthrough)
branch 15 taken 1
branch 16 taken 2 (fallthrough)
branch 17 taken 1
call   18 returned 2
branch 19 taken 3 (fallthrough)
branch 20 taken 0
call   21 returned 3
branch 22 taken 1 (fallthrough)
branch 23 taken 2
branch 24 never executed
branch 25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
        1:   68:      pass_history.push_back(phrase);
call    0 returned 1
        -:   69:    }
        -:   70:  }
        -:   71:
        5:   72:}
        -:   73:
        -:   74:
        -:   75:  /*
        -:   76:  receives a string and authenticates it against the latest password in the
        -:   77:  pass_history, returning true for an exact match or false when it does not match
        -:   78:  or if a password has not been set.
        -:   79:  */
function _ZN8Password12authenticateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 6 returned 100% blocks executed 100%
        6:   80:bool Password::authenticate(string phrase){
        6:   81:  if(phrase == pass_history.back()){
call    0 returned 6
call    1 returned 6
branch  2 taken 2 (fallthrough)
branch  3 taken 4
        2:   82:    return true;
        -:   83:  }
        4:   84:  return false;
        -:   85:}
